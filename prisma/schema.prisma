generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model category {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String
  slug       String    @unique(map: "category_slug_unique")
  created_at DateTime  @default(now()) @db.Timestamp(6)
  product    product[]
}

model product {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  category_id     String            @db.Uuid
  name            String
  slug            String            @unique(map: "product_slug_unique")
  description     String
  price_in_cents  Int
  created_at      DateTime          @default(now()) @db.Timestamp(6)
  category        category          @relation(fields: [category_id], references: [id], onUpdate: NoAction, map: "product_category_id_category_id_fk")
  product_variant product_variant[]
}

model product_variant {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  product_id     String   @db.Uuid
  name           String
  slug           String   @unique(map: "product_variant_slug_unique")
  color          String
  price_in_cents Int
  image_url      String
  created_at     DateTime @default(now()) @db.Timestamp(6)
  product        product  @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "product_variant_product_id_product_id_fk")
}

model user {
  name           String
  email          String   @unique(map: "user_email_unique")
  email_verified Boolean? @default(false)
  image          String?
  created_at     DateTime @default(now()) @db.Timestamp(6)
  updated_at     DateTime @default(now()) @db.Timestamp(6)
  password       String
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tokens         token[]
}

model token {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id       String    @db.Uuid
  created_at    DateTime  @default(now()) @db.Timestamp(6)
  updated_at    DateTime  @default(now()) @db.Timestamp(6)
  refresh_token String
  expires_at    DateTime? @db.Timestamp(6)
  user          user      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model verification {
  id         String    @id
  identifier String
  value      String
  expires_at DateTime  @db.Timestamp(6)
  created_at DateTime? @db.Timestamp(6)
  updated_at DateTime? @db.Timestamp(6)
}
